service: backpac
provider:
  profile: allyn-backpac
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'} 
  memorySize: 128
  timeout: 30
  lambdaHashingVersion: 20201221
  deploymentBucket:
    name: service.backpac.nodejs.lambdas.${self:provider.stage}
  environment:
    STAGE:  ${opt:stage,'dev'}
    REGION: ${opt:region, self:provider.region}
    ACCOUNTID: ${file(config.${self:provider.stage}.json):AWS_ACT_ID}  
    MAGIC_SK_KEY: ${file(config.${self:provider.stage}.json):MAGIC_SK_KEY} 
    MAGIC_SESSION_LENGTH_IN_DAYS: ${file(config.${self:provider.stage}.json):MAGIC_SESSION_LENGTH_IN_DAYS} 
    PROVIDER_API_URL: ${file(config.${self:provider.stage}.json):PROVIDER_API_URL} 
    # USER_AGENT: ${file(config.${self:provider.stage}.json):USER_AGENT}
    CDN_BUCKET: ${file(config.${self:provider.stage}.json):CDN_BUCKET}
    NFT_IMAGE_CDN_BUCKET: ${file(config.${self:provider.stage}.json):NFT_IMAGE_CDN_BUCKET}
    QUICK_NODE_HTTP: ${file(config.${self:provider.stage}.json):QUICK_NODE_HTTP}
    QUICK_NODE_WSS: ${file(config.${self:provider.stage}.json):QUICK_NODE_WSS}
    ETHERSCAN_PRICE_API_URL: ${file(config.${self:provider.stage}.json):ETHERSCAN_PRICE_API_URL}
    ETHERSCAN_API_URL: ${file(config.${self:provider.stage}.json):ETHERSCAN_API_URL}
    ETHERSCAN_BASE_URL: ${file(config.${self:provider.stage}.json):ETHERSCAN_BASE_URL}
    # OPENSEA_API_URL: ${file(config.${self:provider.stage}.json):OPENSEA_API_URL}
    ETH_NETWORK: ${file(config.${self:provider.stage}.json):ETH_NETWORK}
    ETH_NETWORK_ID: ${file(config.${self:provider.stage}.json):ETH_NETWORK_ID}
    ALCHEMY_API_KEY: ${file(config.${self:provider.stage}.json):ALCHEMY_API_KEY}
    ALCHEMY_BASE_URL: ${file(config.${self:provider.stage}.json):ALCHEMY_BASE_URL}
    ALCHEMY_BASE_API_URL: ${file(config.${self:provider.stage}.json):ALCHEMY_BASE_API_URL}
    ALCHEMY_HTTP: ${file(config.${self:provider.stage}.json):ALCHEMY_HTTP}
    ALCHEMY_WSS: ${file(config.${self:provider.stage}.json):ALCHEMY_WSS}
    API_KEY_TOKEN: ${file(config.${self:provider.stage}.json):API_KEY_TOKEN}
    PRO_API_KEY: ${file(config.${self:provider.stage}.json):PRO_API_KEY}
    ETHERSCAN_ABI_PARAMS: ${file(config.${self:provider.stage}.json):ETHERSCAN_ABI_PARAMS}
    OPEN: ${file(config.${self:provider.stage}.json):OPEN}
    # DYNAMODB_TABLE_CONTRACT_ABI: ${self:service}-${opt:stage, self:provider.stage}-contract-abi
    # DYNAMODB_TABLE_NFT_METADATA: ${self:service}-${opt:stage, self:provider.stage}-nfts-metadata
    DYNAMODB_TABLE_WALLET: ${self:service}-${opt:stage, self:provider.stage}-wallet
    # DYNAMODB_TABLE_WALLET_NFT_CACHE: ${self:service}-${opt:stage, self:provider.stage}-wallet-nft-cache
    # DYNAMODB_TABLE_WALLET_COLLECTION_CACHE: ${self:service}-${opt:stage, self:provider.stage}-wallet-collection-cache
    # DYNAMODB_TABLE_ALCHEMY_WALLET_COLLECTION_CACHE: ${self:service}-${opt:stage, self:provider.stage}-alchemy-wallet-collection-cache
    # DYNAMODB_TABLE_ALCHEMY_WALLET_NFT_CACHE: ${self:service}-${opt:stage, self:provider.stage}-alchemy-wallet-nft-cache
    # DYNAMODB_TABLE_WALLET_TX_HASH: ${self:service}-${opt:stage, self:provider.stage}-wallet-nft-tx-hash
    DYNAMODB_TABLE_COMPANY: ${self:service}-${opt:stage, self:provider.stage}-company

    DYNAMODB_TABLE_COMPANY_EVENT: ${self:service}-${opt:stage, self:provider.stage}-company-event
    DYNAMODB_TABLE_COMPANY_EVENT_CONTRACT_ADDRESS_INDEX: ${self:service}-${opt:stage, self:provider.stage}-company-event-contract-address-index
    DYNAMODB_TABLE_COMPANY_EVENTBRITE_EVENT: ${self:service}-${opt:stage, self:provider.stage}-company-eventbrite
    DYNAMODB_TABLE_COMPANY_EVENTBRITE_EVENT_CONTRACT_INDEX: ${self:service}-${opt:stage, self:provider.stage}-company-eventbrite-contract-index
    DYNAMODB_TABLE_EVENTBRITE_VENUE: ${self:service}-${opt:stage, self:provider.stage}-eventbrite-venue

    DYNAMODB_TABLE_HANDLE: ${self:service}-${opt:stage, self:provider.stage}-handle
    DYNAMODB_TABLE_HANDLE_HANDLE_INDEX: ${self:service}-${opt:stage, self:provider.stage}-handle-index
    DYNAMODB_TABLE_HANDLE_EMAIL_INDEX: ${self:service}-${opt:stage, self:provider.stage}-handle-email-index
    DYNAMODB_TABLE_USER: ${self:service}-${opt:stage, self:provider.stage}-user
    DYNAMODB_TABLE_USER_ORDER: ${self:service}-${opt:stage, self:provider.stage}-user-order
    DYNAMODB_TABLE_USER_VENUE: ${self:service}-${opt:stage, self:provider.stage}-user-venue
    DYNAMODB_TABLE_ASSET: ${self:service}-${opt:stage, self:provider.stage}-asset
    DYNAMODB_TABLE_CONTRACT: ${self:service}-${opt:stage, self:provider.stage}-contract

    DYNAMODB_TABLE_CONTRACT_UTILITY: ${self:service}-${opt:stage, self:provider.stage}-contract-utility

    DYNAMODB_TABLE_VENUE: ${self:service}-${opt:stage, self:provider.stage}-venue
    DYNAMODB_TABLE_COMPANY_QRCODE: ${self:service}-${opt:stage, self:provider.stage}-company-qrcode
    DYNAMODB_TABLE_VENUE_CONTRACT: ${self:service}-${opt:stage, self:provider.stage}-venue-contract
    DYNAMODB_TABLE_DEVELOPER: backpac-api-${opt:stage, self:provider.stage}-developer
    NODE: ${file(config.${self:provider.stage}.json):NODE}
    KEY: ${file(config.${self:provider.stage}.json):KEY}
    STATE_MACHINE_REGION: us-east-2
    APP_BASE_URL: ${file(config.${self:provider.stage}.json):APP_BASE_URL}
    STATE_MACHINE_USER_CLAIM_ARN: arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:userClaimStateMachineArn-${self:service}-${opt:stage, self:provider.stage}
    STATE_MACHINE_USER_INQUIRY_ARN: arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:userInquiryStateMachineArn-${self:service}-${opt:stage, self:provider.stage}
    STATE_MACHINE_USER_ORDER_ARN: arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:userOrderStateMachineArn-${self:service}-${opt:stage, self:provider.stage}
    STATE_MACHINE_COLLECTION_ASSET_MINT_ARN: arn:aws:states:us-east-2:${self:provider.environment.ACCOUNTID}:stateMachine:assetMintStateMachine-${self:service}-${opt:stage, self:provider.stage} 
    DYNAMODB_TABLE_DEVELOPER_MINT: backpac-api-${opt:stage, self:provider.stage}-developer-mint
    DYNAMODB_TABLE_DEVELOPER_MINT_CLAIM_INDEX: backpac-api-${opt:stage, self:provider.stage}-developer-mint-recipient-index
  iamRoleStatements: 
    - Effect: "Allow"
      Action:
        - states:StartExecution
        - states:SendTaskSuccess
        - states:ListExecutions
        - states:GetExecutionHistory
        - states:StopExecution
      Resource: 
        #- arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:userClaimStateMachineArn-${self:service}-${opt:stage, self:provider.stage}
        - ${self:provider.environment.STATE_MACHINE_USER_CLAIM_ARN}
        #- arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:walletListStartStateMachine-${self:service}-${opt:stage, self:provider.stage}
    - Effect: "Allow"
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:*
      Resource: 
        - "arn:aws:s3:::${file(config.${self:provider.stage}.json):NFT_IMAGE_CDN_BUCKET}/*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_COMPANY_EVENTBRITE_EVENT}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_COMPANY_EVENTBRITE_EVENT}/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USER_VENUE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_COMPANY}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_COMPANY}/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_VENUE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_COMPANY_QRCODE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_VENUE_CONTRACT}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_VENUE_CONTRACT}/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USER}"
        # - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USER_ORDER}"
        # - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_ASSET}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_CONTRACT}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_CONTRACT}/index/*"
        # - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_CONTRACT_ABI}"
package:
  individually: false
  excludeDevDependencies: false
  exclude:
  - node_modules/puppeteer/.local-chromium/**
functions:
  - ${file(./functions/asset.yml)}
  - ${file(./functions/billing.yml)}
  - ${file(./functions/backpac.yml)}
  - ${file(./functions/console-company.yml)}
  - ${file(./functions/console-venue.yml)}
  - ${file(./functions/claim.yml)}
  - ${file(./functions/contract.yml)}
  - ${file(./functions/company.yml)}
  - ${file(./functions/handle.yml)}
  - ${file(./functions/user.yml)}
  # - ${file(./functions/nft.yml)}
  # - ${file(./functions/cmc.yml)}
  # - ${file(./functions/etherscan.yml)}
  # - ${file(./functions/waitlist.yml)}  
  # - ${file(./functions/quicknode.yml)} 
  # - ${file(./functions/wallet.yml)}
  # - ${file(./functions/collection.yml)}
  # - ${file(./functions/alchemy.yml)}
# stepFunctions: 
#   validate: false
#   stateMachines:
#     collectionLoad:
#       ${file(./statemachines/collection-list-machine.yml)} 
#     nftLoad:
#       ${file(./statemachines/wallet-nft-list-machine.yml)}
#     startNFTLoad:
#       ${file(./statemachines/wallet-nft-list-start-machine.yml)}    
resources:
  Resources: 
    # NFTBucket:
    #  Type: AWS::S3::Bucket
    #  Properties:
    #    BucketName: ${self:provider.environment.CDN_BUCKET} 
    # GatewayResponse:
    #   Type: 'AWS::ApiGateway::GatewayResponse'
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.WWW-Authenticate: "'Basic'"
    #     ResponseType: UNAUTHORIZED
    #     RestApiId:
    #       Ref: 'ApiGatewayRestApi'
    #     StatusCode: '401'
    UserCreationTopic:
        Type: AWS::SNS::Topic
        Properties:
          DisplayName: 'User Creation Topic'
          TopicName: UserCreation-${opt:stage, self:provider.stage}
    HandleDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: type
            AttributeType: S
          -  
            AttributeName: handle
            AttributeType: S
          -  
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: type
            KeyType: HASH
          -
            AttributeName: handle
            KeyType: RANGE     
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1   
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_HANDLE_EMAIL_INDEX}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
              - AttributeName: type
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_HANDLE_HANDLE_INDEX}
            KeySchema:
              - AttributeName: handle
                KeyType: HASH
              - AttributeName: email
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_HANDLE}
    EventBriteEventDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: companyId
            AttributeType: S
          -  
            AttributeName: Id
            AttributeType: S
          -  
            AttributeName: contractAddress
            AttributeType: S
        KeySchema:
          -
            AttributeName: companyId
            KeyType: HASH
          -
            AttributeName: Id
            KeyType: RANGE     
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1   
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_COMPANY_EVENTBRITE_EVENT_CONTRACT_INDEX}
            KeySchema:
              - AttributeName: contractAddress
                KeyType: HASH
              - AttributeName: Id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_COMPANY_EVENTBRITE_EVENT} 
    CompanyEventDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: companyId
            AttributeType: S
          -  
            AttributeName: Id
            AttributeType: S
          -  
            AttributeName: contractAddress
            AttributeType: S
        KeySchema:
          -
            AttributeName: companyId
            KeyType: HASH
          -
            AttributeName: Id
            KeyType: RANGE     
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1  
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_TABLE_COMPANY_EVENT_CONTRACT_ADDRESS_INDEX}
            KeySchema:
              - AttributeName: contractAddress
                KeyType: HASH
              - AttributeName: Id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.tableThroughput}
              WriteCapacityUnits: ${self:custom.tableThroughput}  
        TableName: ${self:provider.environment.DYNAMODB_TABLE_COMPANY_EVENT} 
    # CompanyDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: state
    #         AttributeType: S
    #       -  
    #         AttributeName: companyId
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: state
    #         KeyType: HASH
    #       -
    #         AttributeName: companyId
    #         KeyType: RANGE      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_COMPANY}
    VenueDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: companyId
            AttributeType: S
          -  
            AttributeName: venueId
            AttributeType: S
        KeySchema:
          -
            AttributeName: companyId
            KeyType: HASH
          -
            AttributeName: venueId
            KeyType: RANGE      
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_VENUE}
    UserVenueDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: issuer
            AttributeType: S
          -  
            AttributeName: venueId
            AttributeType: S
        KeySchema:
          -
            AttributeName: issuer
            KeyType: HASH
          -
            AttributeName: venueId
            KeyType: RANGE      
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_USER_VENUE}
    # CompanyQrCodeDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: companyId
    #         AttributeType: S
    #       -  
    #         AttributeName: qrcodeId
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: companyId
    #         KeyType: HASH
    #       -
    #         AttributeName: qrcodeId
    #         KeyType: RANGE      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_COMPANY_QRCODE}
    VenueContractDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: venueId
            AttributeType: S
          -  
            AttributeName: contractAddress
            AttributeType: S
        KeySchema:
          -
            AttributeName: venueId
            KeyType: HASH
          -
            AttributeName: contractAddress
            KeyType: RANGE      
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_VENUE_CONTRACT}
    # UserDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: did
    #         AttributeType: S
    #       -  
    #         AttributeName: issuer
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: did
    #         KeyType: HASH
    #       -
    #         AttributeName: issuer
    #         KeyType: RANGE      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_USER}
    ContractDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: chainSchemaName
            AttributeType: S
          -  
            AttributeName: contractAddress
            AttributeType: S
          -  
            AttributeName: privacy
            AttributeType: S
        KeySchema:
          -
            AttributeName: chainSchemaName
            KeyType: HASH
          -
            AttributeName: contractAddress
            KeyType: RANGE    
        GlobalSecondaryIndexes:
          - IndexName: privacyContractAddressIndex
            KeySchema:
              - AttributeName: privacy
                KeyType: HASH
              - AttributeName: contractAddress
                KeyType: RANGE
            Projection:    
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1      
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CONTRACT}      
custom:
   DYNAMODB_TABLE_SQ_MERCHANT:
     Fn::ImportValue: MerchantTableName-${opt:stage, self:provider.stage}
   DYNAMODB_TABLE_SQ_MERCHANT_COMPANYUUID_INDEX:
     Fn::ImportValue: !ImportValue MerchantTableName-${opt:stage, self:provider.stage}-index-companyuuid
   includeDependencies:
     enableCaching: true
   tableThroughput: 1
   prune:
     automatic: true
     number: 5   
plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-step-functions
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies
  - serverless-iam-roles-per-function


